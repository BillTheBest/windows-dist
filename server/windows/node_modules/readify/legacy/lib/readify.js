'use strict';

var format = require('format-io');
var exec = require('execon');
var squad = require('squad');
var shortdate = require('shortdate');
var promisify = require('es6-promisify');
var currify = require('currify');
var zames = require('zames/legacy');

var WIN = process.platform === 'win32';
var BROWSER = typeof window !== 'undefined';

var map = currify(function (fn, array) {
    return array.map(fn);
});
var sort = currify(function (fn, array) {
    return array.sort(fn);
});
var parseStats = map(parseStat);

var getStat_ = currify(getStat);

var getAllStats = zames(_getAllStats);

var getFS = function getFS() {
    if (!BROWSER) return require('fs');

    var Filer = require('filer');
    return new Filer.FileSystem();
};

var fs = getFS();
var nicki = !WIN && !BROWSER && require('nicki');

var readdir = promisify(fs.readdir, fs);

/* sorting on Win and node v0.8.0 */
var sortFiles = sort(function (a, b) {
    return a.name > b.name ? 1 : -1;
});

var good = function good(f) {
    return function () {
        for (var _len = arguments.length, a = Array(_len), _key = 0; _key < _len; _key++) {
            a[_key] = arguments[_key];
        }

        return f.apply(undefined, [null].concat(a));
    };
};

module.exports = readify;

function readify(path, fn) {
    check(path, fn);

    readdir(path).then(getAllStats(path)).then(good(fn)).catch(fn);
}

function check(path, callback) {
    var pathMsg = 'path should be string!';
    var callbackMsg = 'callback should be function!';

    if (typeof path !== 'string') throw Error(pathMsg);

    if (typeof callback !== 'function') throw Error(callbackMsg);
}

/**
 * @param path
 * @param names
 */
function _getAllStats(path, names, callback) {
    var length = names.length;
    var dir = format.addSlashToEnd(path);

    if (!length) return fillJSON(dir, [], callback);

    var funcs = names.map(function (name) {
        return getStat_(name, dir + name);
    });

    exec.parallel(funcs, function () {
        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
        }

        var files = args.slice(1);
        fillJSON(dir, files, callback);
    });
}

function emptyStat() {
    return {
        mode: 0,
        size: 0,
        mtime: 0,
        isDirectory: function isDirectory() {}
    };
}

function getStat(name, path, callback) {
    fs.stat(path, function (error) {
        var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : emptyStat();

        data.name = name;

        callback(null, data);
    });
}

function parseStat(stat) {
    /* Переводим права доступа в 8-ричную систему */
    var modeStr = Number(stat.mode).toString(8);
    var owner = stat.uid || '';
    var mode = Number(modeStr) || '';
    var isDir = stat.isDirectory();
    var size = isDir ? 'dir' : stat.size;
    var mtime = !stat.mtime ? '' : shortdate(stat.mtime, {
        order: 'little'
    });

    return {
        'name': stat.name,
        'size': format.size(size),
        'date': mtime,
        'owner': owner,
        'mode': mode && format.permissions.symbolic(mode)
    };
}

/**
 * Function fill JSON by file stats
 *
 * @param params - { files, stats, path }
 */
function fillJSON(path, stats, callback) {
    var processFiles = squad(changeOrder, sortFiles, parseStats);
    var json = {
        path: '',
        files: processFiles(stats)
    };

    json.path = format.addSlashToEnd(path);

    changeUIDToName(json, function (error, files) {
        json.files = files;
        callback(null, json);
    });
}

function changeUIDToName(json, callback) {
    if (!nicki) callback(null, json.files);else nicki(function (error, names) {
        var files = void 0;

        if (error) files = json.files.slice();else files = json.files.map(function (file) {
            var owner = file.owner;

            if (names[owner]) file.owner = names[owner];

            return file;
        });

        callback(error, files);
    });
}

function isDir(file) {
    return file.size === 'dir';
}

function not(fn) {
    return function () {
        return !fn.apply(undefined, arguments);
    };
}

function changeOrder(json) {
    var isFile = not(isDir);
    var dirs = json.filter(isDir);
    var files = json.filter(isFile);
    var sorted = dirs.concat(files);

    return sorted;
}